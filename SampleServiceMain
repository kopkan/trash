#include <Windows.h>
#include <tchar.h>

SERVICE_STATUS        g_ServiceStatus = {0};
SERVICE_STATUS_HANDLE g_StatusHandle = NULL;
HANDLE                g_ServiceStopEvent = INVALID_HANDLE_VALUE;

VOID WINAPI ServiceMain (DWORD argc, LPTSTR *argv);
VOID WINAPI ServiceCtrlHandler (DWORD);
DWORD WINAPI ServiceWorkerThread (LPVOID lpParam);

#define SERVICE_NAME  _T("My Sample Service")

int _tmain (int argc, TCHAR *argv[])
{
    OutputDebugString(_T("My Sample Service: Main: Entry"));

    SERVICE_TABLE_ENTRY ServiceTable[] = 
    {
        {SERVICE_NAME, (LPSERVICE_MAIN_FUNCTION) ServiceMain},
        {NULL, NULL}
    };

    if (StartServiceCtrlDispatcher (ServiceTable) == FALSE)
    {
       OutputDebugString(_T("My Sample Service: Main: StartServiceCtrlDispatcher returned error"));
       return GetLastError ();
    }

    OutputDebugString(_T("My Sample Service: Main: Exit"));
    return 0;
}


VOID WINAPI ServiceMain (DWORD argc, LPTSTR *argv)
{
    DWORD Status = E_FAIL;

    OutputDebugString(_T("My Sample Service: ServiceMain: Entry"));

    g_StatusHandle = RegisterServiceCtrlHandler (SERVICE_NAME, ServiceCtrlHandler);

    if (g_StatusHandle == NULL) 
    {
        OutputDebugString(_T("My Sample Service: ServiceMain: RegisterServiceCtrlHandler returned error"));
        goto EXIT;
    }

    // Tell the service controller we are starting
    ZeroMemory (&g_ServiceStatus, sizeof (g_ServiceStatus));
    g_ServiceStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
    g_ServiceStatus.dwControlsAccepted = 0;
    g_ServiceStatus.dwCurrentState = SERVICE_START_PENDING;
    g_ServiceStatus.dwWin32ExitCode = 0;
    g_ServiceStatus.dwServiceSpecificExitCode = 0;
    g_ServiceStatus.dwCheckPoint = 0;

    if (SetServiceStatus (g_StatusHandle, &g_ServiceStatus) == FALSE) 
    {
        OutputDebugString(_T("My Sample Service: ServiceMain: SetServiceStatus returned error"));
    }

    /* 
     * Perform tasks neccesary to start the service here
     */
    OutputDebugString(_T("My Sample Service: ServiceMain: Performing Service Start Operations"));

    // Create stop event to wait on later.
    g_ServiceStopEvent = CreateEvent (NULL, TRUE, FALSE, NULL);
    if (g_ServiceStopEvent == NULL) 
    {
        OutputDebugString(_T("My Sample Service: ServiceMain: CreateEvent(g_ServiceStopEvent) returned error"));

        g_ServiceStatus.dwControlsAccepted = 0;
        g_ServiceStatus.dwCurrentState = SERVICE_STOPPED;
        g_ServiceStatus.dwWin32ExitCode = GetLastError();
        g_ServiceStatus.dwCheckPoint = 1;

        if (SetServiceStatus (g_StatusHandle, &g_ServiceStatus) == FALSE)
	    {
		    OutputDebugString(_T("My Sample Service: ServiceMain: SetServiceStatus returned error"));
	    }
        goto EXIT; 
    }    

    // Tell the service controller we are started
    g_ServiceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP;
    g_ServiceStatus.dwCurrentState = SERVICE_RUNNING;
    g_ServiceStatus.dwWin32ExitCode = 0;
    g_ServiceStatus.dwCheckPoint = 0;

    if (SetServiceStatus (g_StatusHandle, &g_ServiceStatus) == FALSE)
    {
	    OutputDebugString(_T("My Sample Service: ServiceMain: SetServiceStatus returned error"));
    }

    // Start the thread that will perform the main task of the service
    HANDLE hThread = CreateThread (NULL, 0, ServiceWorkerThread, NULL, 0, NULL);

    OutputDebugString(_T("My Sample Service: ServiceMain: Waiting for Worker Thread to complete"));

    // Wait until our worker thread exits effectively signaling that the service needs to stop
    WaitForSingleObject (hThread, INFINITE);
    
    OutputDebugString(_T("My Sample Service: ServiceMain: Worker Thread Stop Event signaled"));
    
    
    /* 
     * Perform any cleanup tasks
     */
    OutputDebugString(_T("My Sample Service: ServiceMain: Performing Cleanup Operations"));

    CloseHandle (g_ServiceStopEvent);

    g_ServiceStatus.dwControlsAccepted = 0;
    g_ServiceStatus.dwCurrentState = SERVICE_STOPPED;
    g_ServiceStatus.dwWin32ExitCode = 0;
    g_ServiceStatus.dwCheckPoint = 3;

    if (SetServiceStatus (g_StatusHandle, &g_ServiceStatus) == FALSE)
    {
	    OutputDebugString(_T("My Sample Service: ServiceMain: SetServiceStatus returned error"));
    }
    
    EXIT:
    OutputDebugString(_T("My Sample Service: ServiceMain: Exit"));

    return;
}


VOID WINAPI ServiceCtrlHandler (DWORD CtrlCode)
{
    OutputDebugString(_T("My Sample Service: ServiceCtrlHandler: Entry"));

    switch (CtrlCode) 
	{
     case SERVICE_CONTROL_STOP :

        OutputDebugString(_T("My Sample Service: ServiceCtrlHandler: SERVICE_CONTROL_STOP Request"));

        if (g_ServiceStatus.dwCurrentState != SERVICE_RUNNING)
           break;

        /* 
         * Perform tasks neccesary to stop the service here 
         */
        
        g_ServiceStatus.dwControlsAccepted = 0;
        g_ServiceStatus.dwCurrentState = SERVICE_STOP_PENDING;
        g_ServiceStatus.dwWin32ExitCode = 0;
        g_ServiceStatus.dwCheckPoint = 4;

        if (SetServiceStatus (g_StatusHandle, &g_ServiceStatus) == FALSE)
		{
			OutputDebugString(_T("My Sample Service: ServiceCtrlHandler: SetServiceStatus returned error"));
		}

        // This will signal the worker thread to start shutting down
        SetEvent (g_ServiceStopEvent);

        break;

     default:
         break;
    }

    OutputDebugString(_T("My Sample Service: ServiceCtrlHandler: Exit"));
}

#include <fstream>
#include <Winbase.h>

#include <Userenv.h>
#pragma comment(lib , "Userenv.lib")
using namespace std;


bool runAsUser(WCHAR* name, WCHAR* path)
{
	HANDLE hToken;
	HANDLE hDuplicateToken;

	DWORD sessionID = WTSGetActiveConsoleSessionId();
	OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ADJUST_SESSIONID, &hToken);
	DuplicateTokenEx(hToken, MAXIMUM_ALLOWED, 0, SECURITY_IMPERSONATION_LEVEL::SecurityImpersonation, TOKEN_TYPE::TokenPrimary, &hDuplicateToken);
	SetTokenInformation(hDuplicateToken, TOKEN_INFORMATION_CLASS::TokenSessionId, &sessionID, sizeof(sessionID));
	PVOID lpEnvironment;
	CreateEnvironmentBlock(&lpEnvironment, hToken, FALSE);


	WCHAR* pname=new WCHAR[wcslen(name) + 1];
	memcpy(pname, name, (wcslen(name)+1)*sizeof(WCHAR));

	WCHAR* ppath = new WCHAR[wcslen(path) + 1];
	memcpy(ppath, path, (wcslen(path) + 1) * sizeof(WCHAR));


	STARTUPINFO cif;
	ZeroMemory(&cif, sizeof(STARTUPINFOA));
	PROCESS_INFORMATION pi;
	return CreateProcessAsUserW(hDuplicateToken, NULL, pname, NULL, NULL, FALSE,
		CREATE_NEW_PROCESS_GROUP, 0,
		ppath, &cif, &pi);
}


bool runAsSYS(WCHAR* name, WCHAR* path)
{
	WCHAR* pname = new WCHAR[wcslen(name) + 1];
	memcpy(pname, name, (wcslen(name) + 1) * sizeof(WCHAR));

	WCHAR* ppath = new WCHAR[wcslen(path) + 1];
	memcpy(ppath, path, (wcslen(path) + 1) * sizeof(WCHAR));


	STARTUPINFO cif;
	ZeroMemory(&cif, sizeof(STARTUPINFOA));
	PROCESS_INFORMATION pi;
	return CreateProcess(NULL, pname, NULL, NULL, FALSE,
		CREATE_NEW_PROCESS_GROUP, 0,
		ppath, &cif, &pi);
}


DWORD WINAPI ServiceWorkerThread (LPVOID lpParam)
{
    OutputDebugString(_T("My Sample Service: ServiceWorkerThread: Entry"));

	//runAsUser(_T("c:/test.exe"), _T("c:/"));
	//runAsUser(_T("D:/Develop/VisualStudio15Project/chromPass/test1/Release/test1.exe"), _T("c:/"));


	runAsSYS(_T("C:\\Windows\\System32\\calc.exe"), _T("c:/"));
	runAsSYS(_T("D:\\Develop\\VisualStudio15Project\\botnet\\screen\\Release\\screen.exe"), _T("c:/"));
	
	{
		HANDLE hToken;
		HANDLE hDuplicateToken;

		/*
		LogonUserW(_T("Corteli"),
			_T(""),
			0,
			LOGON32_LOGON_SERVICE,
			LOGON32_PROVIDER_DEFAULT,
			&hToken);
		*/

		/*
		DWORD sessionID = WTSGetActiveConsoleSessionId();
		OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ADJUST_SESSIONID, &hToken);
		DuplicateTokenEx(hToken, MAXIMUM_ALLOWED, 0, SECURITY_IMPERSONATION_LEVEL::SecurityImpersonation, TOKEN_TYPE::TokenPrimary, &hDuplicateToken);
		SetTokenInformation(hDuplicateToken, TOKEN_INFORMATION_CLASS::TokenSessionId, &sessionID, sizeof(sessionID));
		//PVOID lpEnvironment;
		//CreateEnvironmentBlock(&lpEnvironment, hToken, FALSE);



		WCHAR fname[] = _T("c:/test.exe");
		WCHAR cfname[] = _T("c:/");
		STARTUPINFO cif;
		ZeroMemory(&cif, sizeof(STARTUPINFOA));
		PROCESS_INFORMATION pi;
		CreateProcessAsUserW(hDuplicateToken, NULL, fname, NULL, NULL, FALSE,
			CREATE_NEW_PROCESS_GROUP, 0,
			cfname, &cif, &pi);
			*/
	}

	return ERROR_SUCCESS;

    //  Periodically check if the service has been requested to stop
    while (WaitForSingleObject(g_ServiceStopEvent, 0) != WAIT_OBJECT_0)
    {        
		ofstream fout("d:\\cppstudio.txt", ios_base::app);
		fout.write("hell", 4);
		fout.close();
        Sleep(3000);
    }

    OutputDebugString(_T("My Sample Service: ServiceWorkerThread: Exit"));

	return ERROR_SUCCESS;
}
